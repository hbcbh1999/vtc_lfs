// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace VTC.Reporting
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using VTC.Common;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\VTCProject\vtc_lfs\VTC.Reporting\SummaryReportTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class SummaryReportTemplate : SummaryReportTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Summary Report</title>\r\n\r\n<link rel=\"ic" +
                    "on\" href=\"./ReportAssets/favicon.ico\">\r\n<link rel=\"stylesheet\" href=\"https://sta" +
                    "ckpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" integrity=\"sha384" +
                    "-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\" crossorigin=\"" +
                    "anonymous\">\r\n<script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" inte" +
                    "grity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" " +
                    "crossorigin=\"anonymous\"></script>\r\n<script src=\"https://cdn.jsdelivr.net/npm/pop" +
                    "per.js@1.16.1/dist/umd/popper.min.js\" integrity=\"sha384-9/reFTGAW83EW2RDu2S0VKaI" +
                    "zap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN\" crossorigin=\"anonymous\"></script>\r\n<sc" +
                    "ript src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js" +
                    "\" integrity=\"sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMM" +
                    "V+rV\" crossorigin=\"anonymous\"></script>\r\n<script src=\"./ReportAssets/report.js\">" +
                    "</script>\r\n<meta charset=\"UTF-8\">\r\n<title>TMC</title>\r\n<link rel=\"stylesheet\" hr" +
                    "ef=\"ReportAssets/report.css\" type=\"text/css\">\r\n<link href=\'https://fonts.googlea" +
                    "pis.com/css?family=Roboto:400,100,100italic,300,400italic,300italic,500,500itali" +
                    "c,700,700italic,900,900italic|Lato:400,100,100italic,300,300italic,400italic,700" +
                    ",700italic,900,900italic|Roboto+Condensed:400,300,300italic,400italic,700,700ita" +
                    "lic|Source+Sans+Pro:400,200,200italic,300,300italic,400italic,600,600italic,700," +
                    "700italic,900,900italic|Montserrat:400,700|Fjalla+One\' rel=\'stylesheet\' type=\'te" +
                    "xt/css\'>\r\n<link href=\'https://fonts.googleapis.com/css?family=Inconsolata:400,70" +
                    "0|Roboto+Mono:400,100,100italic,300,300italic,400italic,500,500italic,700,700ita" +
                    "lic|Source+Code+Pro:400,200,300,500,700,600,900|Droid+Sans+Mono\' rel=\'stylesheet" +
                    "\' type=\'text/css\'>\r\n<link href=\'https://fonts.googleapis.com/css?family=Open+San" +
                    "s:400,300,300italic,400italic,600,600italic,700,700italic,800italic,800\' rel=\'st" +
                    "ylesheet\' type=\'text/css\'>\r\n\r\n</head>\r\n<body>\r\n\r\n<div class=\"container\" id=\"main" +
                    "\">\r\n\r\n    <div id=\"docheader\" class=\"row\">\r\n        <div class=\"col\">\r\n         " +
                    "   <h4>Turn Movement Count </h4>\r\n            <h4><span class=\"light\">Location: " +
                    "</span>");
            
            #line 35 "C:\VTCProject\vtc_lfs\VTC.Reporting\SummaryReportTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Location));
            
            #line default
            #line hidden
            this.Write("</h4>\r\n            <h4><span class=\"light\">Date: </span>");
            
            #line 36 "C:\VTCProject\vtc_lfs\VTC.Reporting\SummaryReportTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(VideoTime));
            
            #line default
            #line hidden
            this.Write(@"</h4>
        </div>
    </div>

    <div class=""row text-center"">
        <img id=""legend"" src=""./RegionsLegend.png"">
    </div>
    
    <div class=""row"">
        <div class=""col"">
            <h2>Totals - by class</h2>
        </div>
    </div>

    ");
            
            #line 50 "C:\VTCProject\vtc_lfs\VTC.Reporting\SummaryReportTemplate.tt"
  foreach (ObjectType t in Enum.GetValues(typeof(ObjectType))) { 
            
            #line default
            #line hidden
            this.Write("    <div class=\"row\">\r\n        <div class=\"col\">\r\n            <h4><span class=\"li" +
                    "ght\">Total (");
            
            #line 53 "C:\VTCProject\vtc_lfs\VTC.Reporting\SummaryReportTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(t.ToString()));
            
            #line default
            #line hidden
            this.Write("):</span>");
            
            #line 53 "C:\VTCProject\vtc_lfs\VTC.Reporting\SummaryReportTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Movements.Where(m => m.TrafficObjectType == t).Count()));
            
            #line default
            #line hidden
            this.Write("</h4>\r\n        </div>\r\n    </div>\r\n    ");
            
            #line 56 "C:\VTCProject\vtc_lfs\VTC.Reporting\SummaryReportTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    \r\n    <div class=\"row\">\r\n        <div class=\"col\">\r\n            <h2>Totals - " +
                    "by approach</h2>\r\n        </div>\r\n    </div>\r\n    \r\n    ");
            
            #line 64 "C:\VTCProject\vtc_lfs\VTC.Reporting\SummaryReportTemplate.tt"
  foreach (string approach in ApproachNames) { 
            
            #line default
            #line hidden
            this.Write("    <div class=\"row\">\r\n        <div class=\"col\">\r\n            <h4><span class=\"li" +
                    "ght\">Total (");
            
            #line 67 "C:\VTCProject\vtc_lfs\VTC.Reporting\SummaryReportTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(approach));
            
            #line default
            #line hidden
            this.Write("):</span>");
            
            #line 67 "C:\VTCProject\vtc_lfs\VTC.Reporting\SummaryReportTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Movements.Where(m => m.Approach == approach).Count()));
            
            #line default
            #line hidden
            this.Write("</h4>\r\n        </div>\r\n    </div>\r\n    ");
            
            #line 70 "C:\VTCProject\vtc_lfs\VTC.Reporting\SummaryReportTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n</div>\r\n\r\n<footer>\r\n  <p>Counts generated by &nbsp; <img id=\"logoicon\" src=\"./R" +
                    "eportAssets/favicon.ico\"> VTC on ");
            
            #line 75 "C:\VTCProject\vtc_lfs\VTC.Reporting\SummaryReportTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now));
            
            #line default
            #line hidden
            this.Write("</p> \r\n</footer>\r\n\r\n</body>\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 80 "C:\VTCProject\vtc_lfs\VTC.Reporting\SummaryReportTemplate.tt"

public List<VTC.Common.Movement> Movements;
public string Location = "";
public DateTime VideoTime;
public List<string> ApproachNames;

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class SummaryReportTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
